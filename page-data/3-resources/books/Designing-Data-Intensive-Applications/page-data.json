{"componentChunkName":"component---node-modules-gatsby-theme-kb-src-templates-topic-js","path":"/3-resources/books/Designing-Data-Intensive-Applications","result":{"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"non-fiction\",\n  \"type\": \"book\",\n  \"author\": \"Martin Kleppmann\",\n  \"title\": \"Designing Data-Intensive Applications\",\n  \"sub-title\": \"The big ideas behind reliable, scalable and maintainable systems\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Designing Data-Intensive Applications\"), mdx(\"p\", null, \"by \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Martin-Kleppmann\",\n    \"title\": \"Martin Kleppmann\"\n  }, \"[[Martin Kleppmann]]\"), \"\"), mdx(\"h2\", null, \"Highlights\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The Internet was done so well that most people think of it as a natural resource like the Pacific Ocean, rather than something that was man-made. When was the last time a technology with a scale like that was so error-free?\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Many applications today are data-intensive, as opposed to compute-intensive. Raw CPU power is rarely a limiting factor for these applications\\u2014bigger problems are usually the amount of data, the complexity of data, and the speed at which it is changing.\")), mdx(\"h2\", null, \"Contents\"), mdx(\"h3\", null, \"Part 1: Foundations of Data Systems\"), mdx(\"h4\", null, \"Reliable, Scalable & Maintainable Applications\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mostly all applications are built with standard building blocks. These building blocks are\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"database\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"cache (to store the result of an expensive operation)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"search index (search by keyword or filter)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"stream processing (asynchronus messages)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"batch processing (periodically crunch large data)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"And these different blocks are stitched together through application code\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"There are many factors that may influence the design of a data system\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"skills and experience of the people involved\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"legacy system dependencies\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"time scale for delivery\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"regulatory constraints\")))), mdx(\"h2\", null, \"Notes\"), mdx(\"h2\", null, \"The Book in 3 Sentences\"), mdx(\"h2\", null, \"Who Should Read It?\"), mdx(\"h2\", null, \"My Top 3 Quotes\"), mdx(\"h2\", null, \"Bibliography\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"Patterns%20of%20Enterprise%20Application%20Architecture\",\n    \"title\": \"Patterns of Enterprise Application Architecture\"\n  }, \"[[Patterns of Enterprise Application Architecture]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The Mythical Man-Month\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Designing Data-Intensive Applications","private":false},"tableOfContents":{"items":[{"url":"#designing-data-intensive-applications","title":"Designing Data-Intensive Applications","items":[{"url":"#highlights","title":"Highlights"},{"url":"#contents","title":"Contents","items":[{"url":"#part-1-foundations-of-data-systems","title":"Part 1: Foundations of Data Systems","items":[{"url":"#reliable-scalable--maintainable-applications","title":"Reliable, Scalable & Maintainable Applications"}]}]},{"url":"#notes","title":"Notes"},{"url":"#the-book-in-3-sentences","title":"The Book in 3 Sentences"},{"url":"#who-should-read-it","title":"Who Should Read It?"},{"url":"#my-top-3-quotes","title":"My Top 3 Quotes"},{"url":"#bibliography","title":"Bibliography"}]}]},"outboundReferences":[{"contextLine":"* [[Patterns of Enterprise Application Architecture]]","targetAnchor":null,"refWord":"Patterns of Enterprise Application Architecture","label":null,"target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"non-fiction\",\n  \"type\": \"book\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Patterns of Enterprise Application Architecture\"), mdx(\"p\", null, \"by \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Martin-Fowler\",\n    \"title\": \"Martin Fowler\"\n  }, \"[[Martin Fowler]]\"), \"\"), mdx(\"h2\", null, \"Highlights\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"One of the best things you can do is turn a larger project into a small one by simplifying its architecture and process.\")), mdx(\"h2\", null, \"Notes\"), mdx(\"h3\", null, \"0. Introduction\"), mdx(\"h4\", null, \"Architecture\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Architecture is decisions that are hard to change.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Architecture is highest-level breakdown of a system into its parts.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Architecture is subjective and is a shared understanding of a system\\u2019s design by the expert developers on a project.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It\\u2019s also about decisions, in that it\\u2019s the decisions that developers wish they could get right early on because they\\u2019re perceived as hard to change. The subjectivity comes in here as well because, if you find that something is easier to change than you once thought, then it\\u2019s no longer architectural. In the end architecture boils down to the important stuff\\u2014whatever that is.\")), mdx(\"h4\", null, \"Enterprise Applications\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In some ways enterprise applications are much easier than telecoms software\\u2014we don\\u2019t have very hard multithreading problems, and we don\\u2019t have hardware and software integration.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Enterprise applications usually involve\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"persistent data\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a lot of data\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"access data concurrently\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a lot of user interface screens\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"integration with other enterprise applications\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"conceptual dissonance\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"complex business illogic\")))), mdx(\"h4\", null, \"Thinking about performance\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Many architectural decisions are about performance.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Scalability is a measure of how adding resources (usually hardware) affects performance. A scalable system is one that allows you to add hardware and get a commensurate performance improvement, such as doubling how many servers you have to double your throughput. Vertical scalability, or scaling up, means adding more power to a single server, such as more memory. Horizontal scalability, or scaling out, means adding more servers.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Adding more servers is often cheaper than adding more programmers\\u2014providing that a system is scalable.\")), mdx(\"h3\", null, \"1. Layering\"), mdx(\"p\", null, \"One of the well known layering architecture is the Network OSI model.\"), mdx(\"img\", {\n    style: {\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\"\n    },\n    src: \"/knowledge/737d0a81e859c3fc856ec87a6fed8bff/101osi.png\",\n    alt: \"OSI network model\"\n  }), mdx(\"h4\", null, \"Pros and cons of Layer Architecture\"), mdx(\"h5\", null, \"Pros:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can understand a single layer as a coherent whole without knowing much about the other layers. You can understand how to build an FTP service on top of TCP without knowing the details of how ethernet works.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can substitute layers with alternative implementations of the same basic services. An FTP service can run without change over ethernet, PPP, or whatever a cable company uses.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You minimize dependencies between layers. If the cable company changes its physical transmission system, providing they make IP work, we don\\u2019t have to alter our FTP service.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Layers make good places for standardization. TCP and IP are standards because they define how their layers should operate.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Once you have a layer built, you can use it for many higher-level services. Thus, TCP/IP is used by FTP, telnet, SSH, and HTTP. Otherwise, all of these higher-level protocols would have to write their own lower-level protocols.\")), mdx(\"h5\", null, \"Cons:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Layers encapsulate some, but not all, things well. As a result you sometimes get cascading changes. The classic example of this in a layered enterprise application is adding a field that needs to display on the UI, must be in the database, and thus must be added to every layer in between.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Extra layers can harm performance. At every layer things typically need to be transformed from one representation to another. However, the encapsulation of an underlying function often gives you efficiency gains that more than compensate. A layer that controls transactions can be optimized and will then make everything faster.\")), mdx(\"h4\", null, \"The Three Principal layers of Enterprise Applications\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Presentation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Domain (Business logic)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Data source\")), mdx(\"h3\", null, \"2. Organizing Domain Logic\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Transaction Script\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Domain Model\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Table Module\")), mdx(\"h2\", null, \"Bibliography\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/A-Pattern-Language\",\n    \"title\": \"A Pattern Language\"\n  }, \"[[A Pattern Language]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"Extreme%20Programming%20Explained\",\n    \"title\": \"Extreme Programming Explained\"\n  }, \"[[Extreme Programming Explained]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Test-Driven-Development\",\n    \"title\": \"Test-Driven Development\"\n  }, \"[[Test-Driven Development]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Domain-Driven-Design\",\n    \"title\": \"Domain-Driven Design\"\n  }, \"[[Domain-Driven Design]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Refactoring\",\n    \"title\": \"Refactoring\"\n  }, \"[[Refactoring]]\"), \"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/Design-Patterns\",\n    \"title\": \"Design Patterns\"\n  }, \"[[Design Patterns]]\"), \"\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"0e85ee8e-30ac-57f2-afd3-f75cf776635b","fields":{"slug":"/3-resources/books/Patterns-of-Enterprise-Application-Architecture","title":"Patterns of Enterprise Application Architecture"}}}}],"inboundReferences":[]},"fields":{"slug":"/3-resources/books/Designing-Data-Intensive-Applications","title":"Designing Data-Intensive Applications"}}},"pageContext":{"id":"3f23beb6-a5d7-5e4b-ad15-f8712a83f42b","refWordMdxSlugDict":{"Patterns of Enterprise Application Architecture":"3-resources/books/Patterns-of-Enterprise-Application-Architecture","Extreme Programming Explained":"3-resources/books/Extreme-Programming-Explained","Peopleware":"3-resources/books/peopleware","Domain-Driven Design":"3-resources/books/Domain-Driven-Design"},"tocTypes":["sidebar"]}},"staticQueryHashes":["2221750479","2380733210","2768355698","63159454","847517413"]}